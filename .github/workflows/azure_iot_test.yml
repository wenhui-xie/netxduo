# This is a basic workflow that is manually triggered

name: azure_iot_test

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "linux_job"
  AzureIoT:

    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    strategy:
      matrix:
        name: ["enable_all"]
        cflags: [""]
        cmake_flags: ["-DIOT_SECURITY_MODULE_DIST_TARGET=RTOS_BASE_UT"]
        coverage: [true]
        include:
          - name: "disable_precondition"
            cflags: "-DAZ_NO_PRECONDITION_CHECKING -DAZ_NO_LOGGING -DNX_DISABLE_IPV6"
            cmake_flags: "-DIOT_SECURITY_MODULE_DIST_TARGET=RTOS_BASE_UT"
            coverage: false
          - name: "disable_security_module"
            cflags: ""
            cmake_flags: "-DNX_AZURE_DISABLE_IOT_SECURITY_MODULE=ON"
            coverage: false

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Check out the repository
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install softwares
      run: "cd test/regression/azure_iot/.build && ./install_softwares.sh"

    - name: Checkout submodules
      run: "cd test/regression/azure_iot/.build && ./checkout_submodules.sh"

    - name: CMake
      run: |
        mkdir build
        echo "CFLAGS: ${{ matrix.cflags }}"
        echo "CMake FLAGS: ${{ matrix.cmake_flags }}"
        cd build && CFLAGS="${{ matrix.cflags }}" cmake ../test/regression/azure_iot/project/cmake -GNinja ${{ matrix.cmake_flags }}

    - name: Build
      run: "cd build && ninja"

    - name: Memory measurement
      run: |
        cd build
        for i in `find . -name "*.a"`; do arm-none-eabi-size --totals $i; echo ""; done

    - name: Test
      run: "cd build && ctest -T test --no-compress-output --test-output-size-passed 4194304 --test-output-size-failed 4194304 --output-on-failure --timeout 180 --output-junit azure_iot_test.xml"

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2.11.0
      if: always()
      with:
        check_name: Test Results AzureIoT(${{ matrix.name }})
        files: |
          ./build/*.xml

    - name: Upload Test Results
      if: success() || failure()
      uses: actions/upload-artifact@v3.1.3
      with:
        name: test_reports_AzureIoT
        path: |
          ./build/*.txt
          ./build/Testing/**/*.xml

    - name: Configure GitHub Pages
      uses: actions/configure-pages@v3.0.6

    - name: Generate Code Coverage
      if: (matrix.coverage)
      run: |
        mkdir -p coverage_report/AzureIoT
        gcovr --object-directory=./build/netxduo/CMakeFiles/netxduo.dir/addons/azure_iot -r ./addons/azure_iot --xml-pretty --output coverage_report/azure_iot_coverage.xml
        gcovr --object-directory=./build/netxduo/CMakeFiles/netxduo.dir/addons/azure_iot -r ./addons/azure_iot --html --html-details --output coverage_report/AzureIoT/index.html

    - name: Generate Code Coverage Results Summary
      if: (matrix.coverage)
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: ./coverage_report/azure_iot_coverage.xml
        format: markdown
        badge: true
        hide_complexity: true
        output: file

    - name: Write Code Coverage Summary
      if: (matrix.coverage)
      run: |
        echo "## Coverage Report AzureIoT" >> $GITHUB_STEP_SUMMARY
        cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY

    - name: Create CheckRun for Code Coverage
      if: ((github.event_name == 'push') || (github.event_name == 'workflow_dispatch') || (github.event.pull_request.head.repo.full_name == github.repository)) && (matrix.coverage)
      uses: LouisBrunner/checks-action@v1.6.2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        name: Code Coverage AzureIoT
        conclusion: ${{ job.status }}
        output: |
          {"summary":"Coverage Report"}
        output_text_description_file: code-coverage-results.md

    - name: Add Code Coverage PR Comment
      if: ((github.event_name == 'push') || (github.event.pull_request.head.repo.full_name == github.repository)) && (matrix.coverage)
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        header: Code Coverage AzureIoT
        path: code-coverage-results.md

    - name: Upload Code Coverage Artifacts
      uses: actions/upload-artifact@v3.1.3
      if: (matrix.coverage)
      with:
        name: coverage_report
        path: ./coverage_report
        retention-days: 1